unit module SDL::Structures;

use NativeCall;
# Ideally this file could be autogenerated.

class SDL_version is repr<CStruct> is export { # typedef struct {
    has uint8 $.major;                         #     Uint8 major;
    has uint8 $.minor;                         #     Uint8 minor;
    has uint8 $.patch;                         #     Uint8 patch;
}                                              # } SDL_version;

# From: SDL_video.h

class SDL_Rect is repr<CStruct> is export { # typedef struct SDL_Rect {
    has  int16 $.x; has  int16 $.y;         #     Sint16 x, y;
    has uint16 $.w; has uint16 $.h;         #     Uint16 w, h;
                                            # } SDL_Rect;
    method new($x = 0, $y = 0, $w = 0, $h = 0) {
        self.bless(:$x, :$y, :$w, :$h);
    }
}

class SDL_Color is repr<CStruct> is export { # typedef struct SDL_Color {
    has uint8 $.r;                           #     Uint8 r;
    has uint8 $.g;                           #     Uint8 g;
    has uint8 $.b;                           #     Uint8 b;
    has uint8 $.unused;                      #     Uint8 unused;
}                                            # } SDL_Color;
constant SDL_Colour = SDL_Color;             #define SDL_Colour SDL_Color

class SDL_Palette is repr<CStruct> is export {  # typedef struct SDL_Palette {
    has              int32 $.ncolors;           #     int       ncolors;
    has Pointer[SDL_Color] $.colors;            #     SDL_Color *colors;
}                                               # } SDL_Palette;

#~ /** Everything in the pixel format structure is read-only */
class SDL_PixelFormat is repr<CStruct> is export { # typedef struct SDL_PixelFormat {
    has SDL_Palette $.palette;                     #      SDL_Palette *palette;
    has       uint8 $.BitsPerPixel;                #      Uint8  BitsPerPixel;
    has       uint8 $.BytesPerPixel;               #      Uint8  BytesPerPixel;
    has       uint8 $.Rloss;                       #      Uint8  Rloss;
    has       uint8 $.Gloss;                       #      Uint8  Gloss;
    has       uint8 $.Bloss;                       #      Uint8  Bloss;
    has       uint8 $.Aloss;                       #      Uint8  Aloss;
    has       uint8 $.Rshift;                      #      Uint8  Rshift;
    has       uint8 $.Gshift;                      #      Uint8  Gshift;
    has       uint8 $.Bshift;                      #      Uint8  Bshift;
    has       uint8 $.Ashift;                      #      Uint8  Ashift;
    has      uint32 $.Rmask;                       #      Uint32 Rmask;
    has      uint32 $.Gmask;                       #      Uint32 Gmask;
    has      uint32 $.Bmask;                       #      Uint32 Bmask;
    has      uint32 $.Amask;                       #      Uint32 Amask;
                                                   #      /** RGB color key information */
    has      uint32 $.colorkey;                    #      Uint32 colorkey;
                                                   #      /** Alpha value information (per-surface alpha) */
    has       uint8 $.alpha;                       #      Uint8  alpha;
}                                                  # } SDL_PixelFormat;

#| This structure should be treated as read-only, except for 'pixels',
#| which, if not NULL, contains the raw pixel data for the surface.
class SDL_Surface is repr<CStruct> is export { # typedef struct SDL_Surface {
    has          uint32 $.flags;               #     Uint32 flags;				/**< Read-only */
    has SDL_PixelFormat $.format;              #     SDL_PixelFormat *format;		/**< Read-only */
    has int32 $.w; has int32 $.h;              #     int w, h;				/**< Read-only */
    has          uint16 $.pitch;               #     Uint16 pitch;				/**< Read-only */
    has         Pointer $.pixels;              #     void *pixels;				/**< Read-write */
    has           int32 $.offset;              #     int offset;				/**< Private */
                                               #     /** Hardware-specific surface info */
    has         Pointer $.hwdata;              #     struct private_hwdata *hwdata;
                                               #     /** clipping information */
    HAS        SDL_Rect $.clip_rect;           #     SDL_Rect clip_rect;			/**< Read-only */
    has          uint32 $.unused1;             #     Uint32 unused1;				/**< for binary compatibility */
                                               #     /** Allow recursive locks */
    has          uint32 $.locked;              #     Uint32 locked;				/**< Private */
                                               #     /** info for fast blit mapping to other surfaces */
    has         Pointer $.map;                 #     struct SDL_BlitMap *map;		/**< Private */
                                               #     /** format version, bumped at every change to invalidate blit maps */
    has          uint32 $.format_version;      #     unsigned int format_version;		/**< Private */
                                               #     /** Reference count -- used when freeing surface */
    has           int32 $.refcount;            #     int refcount;				/**< Read-mostly */
}                                              # } SDL_Surface;

#| Useful for determining the video hardware capabilities
class SDL_VideoInfo is repr<CStruct> is export { # typedef struct SDL_VideoInfo {
    has uint32 $.hw_available;                   #     Uint32 hw_available :1;	/**< Flag: Can you create hardware surfaces? */
    has uint32 $.wm_available;                   #     Uint32 wm_available :1;	/**< Flag: Can you talk to a window manager? */
    has uint32 $.UnusedBits1;                    #     Uint32 UnusedBits1  :6;
    has uint32 $.UnusedBits2;                    #     Uint32 UnusedBits2  :1;
    has uint32 $.blit_hw;                        #     Uint32 blit_hw      :1;	/**< Flag: Accelerated blits HW --> HW */
    has uint32 $.blit_hw_CC;                     #     Uint32 blit_hw_CC   :1;	/**< Flag: Accelerated blits with Colorkey */
    has uint32 $.blit_hw_A;                      #     Uint32 blit_hw_A    :1;	/**< Flag: Accelerated blits with Alpha */
    has uint32 $.blit_sw;                        #     Uint32 blit_sw      :1;	/**< Flag: Accelerated blits SW --> HW */
    has uint32 $.blit_sw_CC;                     #     Uint32 blit_sw_CC   :1;	/**< Flag: Accelerated blits with Colorkey */
    has uint32 $.blit_sw_A;                      #     Uint32 blit_sw_A    :1;	/**< Flag: Accelerated blits with Alpha */
    has uint32 $.blit_fill;                      #     Uint32 blit_fill    :1;	/**< Flag: Accelerated color fill */
    has uint32 $.UnusedBits3;                    #     Uint32 UnusedBits3  :16;
    has uint32 $.video_mem;                      #     Uint32 video_mem;	/**< The total amount of video memory (in K) */
    has SDL_PixelFormat $.vfmt;                  #     SDL_PixelFormat *vfmt;	/**< Value: The format of the video surface */
    has int32 $.current_w;                       #     int    current_w;	/**< Value: The current video mode width */
    has int32 $.current_h;                       #     int    current_h;	/**< Value: The current video mode height */
}                                                # } SDL_VideoInfo;

#~ /** The YUV hardware video overlay */
#~ typedef struct SDL_Overlay {
	#~ Uint32 format;				/**< Read-only */
	#~ int w, h;				/**< Read-only */
	#~ int planes;				/**< Read-only */
	#~ Uint16 *pitches;			/**< Read-only */
	#~ Uint8 **pixels;				/**< Read-write */

	#~ /** @name Hardware-specific surface info */
        #~ /*@{*/
	#~ struct private_yuvhwfuncs *hwfuncs;
	#~ struct private_yuvhwdata *hwdata;
        #~ /*@{*/

	#~ /** @name Special flags */
        #~ /*@{*/
	#~ Uint32 hw_overlay :1;	/**< Flag: This overlay hardware accelerated? */
	#~ Uint32 UnusedBits :31;
        #~ /*@}*/
#~ } SDL_Overlay;

class SDL_ActiveEvent is repr<CStruct> is export {
    has uint8 $.type;
    has uint8 $.gain;
    has uint8 $.state;
}

class SDL_keysym is repr<CStruct> is export {
    has  uint8 $.scancode;
    has uint32 $.sym; # SDLKey
    has uint32 $.mod; # SDLMod
    has uint16 $.unicode;
}

class SDL_KeyboardEvent is repr<CStruct> is export {
    has      uint8 $.type;
    has      uint8 $.state;
    HAS SDL_keysym $.keysym;
}

class SDL_MouseMotionEvent is repr<CStruct> is export {
    has  uint8 $.type;
    has  uint8 $.state;
    has uint16 $.x;
    has uint16 $.y;
    has  int16 $.xrel;
    has  int16 $.yrel;
}

class SDL_MouseButtonEvent is repr<CStruct> is export {
    has  uint8 $.type;
    has  uint8 $.button;
    has  uint8 $.state;
    has uint16 $.x;
    has uint16 $.y;
}

class SDL_JoyAxisEvent is repr<CStruct> is export {
    has uint8 $.type;
    has uint8 $.which;
    has uint8 $.axis;
    has int16 $.value;
}

class SDL_JoyBallEvent is repr<CStruct> is export {
    has uint8 $.type;
    has uint8 $.which;
    has uint8 $.ball;
    has int16 $.xrel;
    has int16 $.yrel;
}

class SDL_JoyHatEvent is repr<CStruct> is export {
    has uint8 $.type;
    has uint8 $.which;
    has uint8 $.hat;
    has uint8 $.value;
}

class SDL_JoyButtonEvent is repr<CStruct> is export {
    has uint8 $.type;
    has uint8 $.which;
    has uint8 $.button;
    has uint8 $.state;
}

class SDL_QuitEvent is repr<CStruct> is export {
    has uint8 $.type;
}

class SDL_SysWMEvent is repr<CStruct> is export {
    has   uint8 $.type;
    has Pointer $.msg; # SDL_SysWMmsg
}

class SDL_ResizeEvent is repr<CStruct> is export {
    has uint8 $.type;
    has int32 $.w;
    has int32 $.h;
}

class SDL_ExposeEvent is repr<CStruct> is export {
    has uint8 $.type;
}

class SDL_UserEvent is repr<CStruct> is export {
    has   uint8 $.type;
    has   int32 $.code;
    has Pointer $.data1;
    has Pointer $.data2;
}

class SDL_Event is repr<CUnion> is export {
    has                uint8 $.type;
    HAS      SDL_ActiveEvent $.active;
    HAS    SDL_KeyboardEvent $.key;
    HAS SDL_MouseMotionEvent $.motion;
    HAS SDL_MouseButtonEvent $.button;
    HAS     SDL_JoyAxisEvent $.jaxis;
    HAS     SDL_JoyBallEvent $.jball;
    HAS      SDL_JoyHatEvent $.jhat;
    HAS   SDL_JoyButtonEvent $.jbutton;
    HAS      SDL_ResizeEvent $.resize;
    HAS      SDL_ExposeEvent $.expose;
    HAS        SDL_QuitEvent $.quit;
    HAS        SDL_UserEvent $.user;
    HAS       SDL_SysWMEvent $.syswm;
}

class Mix_Chunk is repr<CStruct> is export {
    has   int32 $.allocated;
    has Pointer $.abuf;
    has  uint32 $.alen;
    has   uint8 $.volume; # Per-sample volume, 0-128
}

